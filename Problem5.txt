Design Explanation
==================

The only design choices really to speak of here are choosing to write an iterative function
for both insert() and find(), while using recursion for suffixes(). I did this both because
it seemed more intuitive and based on the hint saying to use recursion.

Space Efficiency
================

**O(n)**:   find() creates no additional structures, so it will occupy O(1) space.

            in the worst case, insert() will create n additional TrieNodes, occupying O(n) space.

            in the same worst case, calling suffixes on the root node, will grow the implicit stack
            to a size of O(n) as we recur to the leaf-most node.

Time Efficiency
===============

Insert -    O(n) where n is the number of characters in the word.
Find -      O(n) where n is the number of characters in the word.
Suffixes -  O(n) where n is the number of nodes below the prefix node.
