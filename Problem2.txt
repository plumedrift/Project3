Design Explanation
==================

Similarly to P1, I chose an array because the indices make it easier to find a midpoint,
and to split the array as we recur.

Space Efficiency
================

*O(log n)*:   In the worst case, the call stack will reach log n levels deep as we recur, missing the target
              until finally we are down to one or two elements left in visible range.

Time Efficiency
===============

O(log n):   Just like in P1, everytime we recur, the size of the array that we are looking at
            shrinks in half. Therefore, in the worst case, assuming we guess wrong until we are looking
            at only one element, we will be running at O(log n)

